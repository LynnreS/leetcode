class Solution {
public:
    
    void minSum(vector<vector<int> > &triangle, int n){
        if(n == 1){
            return;
        }
        else
            minSum(triangle, n-1);
        triangle[n-1][0] += triangle[n-2][0];
        triangle[n-1][n-1] += triangle[n-2][n-2];
        for(int i = 1; i < n-1; i++){
            triangle[n-1][i] += min(triangle[n-2][i-1], triangle[n-2][i]);
        }
    }
    int minimumTotal(vector<vector<int> > &triangle) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(triangle.size() == 0) return 0;
       // vector<int> path(n, 0);
        int n = triangle.size();
        minSum(triangle,  n);
        int ret = triangle[n-1][0];
        for(int i = 1; i < n; i++){
            if(triangle[n-1][i] < ret)
                ret = triangle[n-1][i];
        }
        return ret;
        
    }
};
