class Solution {
public:
	vector<vector<int> > fourSum(vector<int> &num, int target) {
		// Start typing your C/C++ solution below
		// DO NOT write int main() function
		vector<vector<int> > ret;
		if (num.size() > 3)
		{
			sort(num.begin(), num.end());
			for (int i = 0; i < num.size()-3; i++)
			{
				if (i > 0 && num[i]==num[i-1])
				{
					continue;
				}
				for (int j = i+1; j < num.size()-2; j++)
				{
					if (j > i+1 && num[j]==num[j-1])
					{
						continue;
					}
					int low = j+1;
					int high = num.size()-1;	
					int target_tmp = target - num[i] - num[j];
					while (low < high)
					{				
						if (num[low] + num[high] > target_tmp)
						{
							high--;
						}
						else if (num[low] + num[high] < target_tmp)
						{
							low++;
						}
						else
						{
							vector<int> quadeplet;
							quadeplet.push_back(num[i]);
							quadeplet.push_back(num[j]);
							quadeplet.push_back(num[low]);
							quadeplet.push_back(num[high]);
							ret.push_back(quadeplet);
							quadeplet.clear();
							low++;
						}
					}
				}
			}
		
		}
		ret.erase(unique(ret.begin(), ret.end()), ret.end());

		return ret;
	}
};
