class Solution {
public:
	int find(int A[], int m, int B[], int n, int k)
	{
		int i = (double)m/(m+n)*k - 1;
		int j = k - i - 1;
		int Ai, Ai_1, Bj, Bj_1;

		if (m <= 0)
		{
			return B[k-1];
		}
		if (n <= 0)
		{
			return A[k-1];
		}

		i == m ? Ai = 0x7fffffff : Ai = A[i];
		i == 0 ? Ai_1 = 0x80000000 : Ai_1 = A[i-1];
		j == n ? Bj = 0x7fffffff : Bj = B[j];
		j == 0 ? Bj_1 = 0x80000000 : Bj_1 = B[j-1];
		
		if (Ai >= Bj_1 && Ai <= Bj)
		{
			return Ai;
		}
		else if (Bj >= Ai_1 && Bj <= Ai)
		{
			return Bj;
		}
		else if (Ai < Bj)
		{
			return find(A+i+1, m-i-1, B, j, k-i-1);
		}
		else
		{
			return find(A, i, B+j+1, n-j-1, k-j-1);
		}
	}
	double findMedianSortedArrays(int A[], int m, int B[], int n) {
		// Start typing your C/C++ solution below
		// DO NOT write int main() function	
		
		if ( (m+n)%2 )
		{
			return find(A, m, B, n, (m + n )/2 + 1);
		}
		else
		{
			double a = find(A, m, B, n, (m + n) / 2);
			double b = find(A, m, B, n, (m + n)/2 + 1);
			return (a + b) / 2.0;
		}
	}
};
