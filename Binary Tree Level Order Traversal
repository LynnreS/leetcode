/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    vector<vector<int> > levelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ret;
        
        if(!root) return ret;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()){
            vector<int> tmp;
            vector<TreeNode *> child;
            while(!q.empty()){
                
                TreeNode *p = q.front();
                q.pop();
                tmp.push_back(p->val);
                if(p->left) child.push_back(p->left);
                if(p->right) child.push_back(p->right);
            }
            ret.push_back(tmp);
            for(int i = 0; i < child.size(); i++)
                q.push(child[i]);
        }
        
        
        return ret;
    }
};
