class Solution {
public:
    bool sub(vector<vector<char> > &board, vector<vector<bool> > &visited, int r, int c, string word){
        
        if(visited[r][c] || board[r][c] != word[0]) return false;
        visited[r][c] = true;
        word.erase(word.begin());
        if(word.empty()) return true;
     
      
        if(r > 0 && sub(board, visited, r-1, c, word)) return true;
        if(r < board.size()-1 && sub(board, visited, r+1, c, word)) return true;
        if(c > 0 && sub(board, visited, r, c-1, word)) return true;
        if(c < board[0].size()-1 && sub(board, visited, r, c+1, word)) return true;
        visited[r][c] = false;
        return false;
        
    }
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(board.size() == 0) return false;
        if(word.empty()) return true;
        vector<vector<bool> >visited(board.size(), vector<bool>(board[0].size(), false));
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(sub(board, visited, i, j, word)) return true;
            }
        }
        return false;
    }
};
