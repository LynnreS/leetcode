class Solution {
public:
    void bfs(vector<vector<char> > &board, queue<int> &q, int i, int j){
        int m = board.size();
        int n = board[0].size();
        board[i][j] = 'A';
        q.push(i*n+j);
        while(!q.empty()){
            int k = q.front();
            q.pop();
            int r = k / n;
            int s = k % n;
            
            if(r > 0 && board[r-1][s] == 'O')   { board[r-1][s] = 'A';  q.push( (r-1)*n+s ); }
            if(r < m-1 && board[r+1][s] == 'O') { board[r+1][s] = 'A';  q.push( (r+1)*n+s ); }
            if(s > 0 && board[r][s-1] == 'O')   { board[r][s-1] = 'A';  q.push( r*n+s-1 ); }
            if(s < n-1 && board[r][s+1] == 'O') { board[r][s+1] = 'A';  q.push( r*n+s+1 ); }
        }
        
        
    }
    void solve(vector<vector<char>> &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(board.empty() || board[0].empty()) return;
        int m = board.size();
        int n = board[0].size();
        queue<int> q;

        for(int i = 0; i < n; i++) {
            if(board[0][i] == 'O') bfs(board, q, 0, i);
            if(board[m-1][i] == 'O') bfs(board, q, m-1, i);
        }
        for(int i = 1; i < m-1; i++) {
            if(board[i][0] == 'O')  bfs(board, q, i, 0);
            if(board[i][n-1] == 'O')  bfs(board, q, i, n-1);
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if(board[i][j] == 'A') board[i][j] = 'O';
            }
        }

    }
};
