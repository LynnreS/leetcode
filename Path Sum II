/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > ret;
    vector<int> t;

    void tranverse(TreeNode *root, int sum){
        if(root == NULL) return;
        t.push_back(root->val);
        if(!root->left && !root->right && root->val == sum){
            ret.push_back(t);
            t.pop_back();
            return;
        }
        if(root->left) tranverse(root->left, sum-root->val);
        if(root->right) tranverse(root->right, sum-root->val);
       
        t.pop_back();
    }
    
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        ret.clear();

        tranverse(root, sum);
        return ret;
    }
};
