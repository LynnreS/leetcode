class Solution {
public:
    int minCut(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int len = s.length();
        if(len < 2) return 0;
        vector<vector<bool> > isP(len, vector<bool>(len, false));
        int cut[len];
        for(int i = len; i >= 0; i--) {
            cut[i] = len - i;
        }
        for(int i = len-1; i >= 0; i--) {
            for(int j = i; j < len; j++) {
                if(s[i]==s[j] && (j-i < 2 || isP[i+1][j-1])) {
                    isP[i][j] = true;
                    cut[i] = min(cut[i], cut[j+1]+1);
                }
            }
        }
        return cut[0]-1;
    }
};
class Solution {
public:
    vector<vector<bool> > isP;
    void isPalindrome(string s, int len) {
        for(int i = 0; i < len; i++) {
            isP[i][i] = true;
        }
        for(int i = len-2; i >= 0; i--) {
            isP[i][i+1] = s[i]==s[i+1];
            for(int j = i+2; j < len; j++) {
                isP[i][j] = s[i]==s[j] && isP[i+1][j-1]; 
            }
        }
    }
    bool dfs(string s, int start, int &cnt) {
        if(start == s.length()) {
            return true;
        }
        for(int i = s.length()-1; i >= 0; i--) {
            if(isP[start][i]) {
                if(dfs(s, i+1,  cnt)) { cnt++; return true; }
            }
        }
    }

    int minCut(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int len = s.length();
        if(len <= 1) return 0;
        isP.resize(len, vector<bool>(len, false));       
        isPalindrome(s, len);
        int cnt = 0;
        dfs(s, 0, cnt);
        return cnt-1;
    }
};
