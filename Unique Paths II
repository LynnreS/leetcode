class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int m = obstacleGrid.size();
        if(m == 0) return 0;
        int n = obstacleGrid[0].size();
        if(n == 0) return 0;
        if(obstacleGrid[m-1][n-1] == 1) return 0;
        vector<vector<int> > num(100, vector<int>(100, 0));
        int i = 0;
        while(i < m && obstacleGrid[i][0]==0) num[i++][0] = 1;  
        i = 0;
        while(i < n && obstacleGrid[0][i]==0) num[0][i++] = 1;
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(obstacleGrid[i][j]==1) num[i][j] = 0;
                else num[i][j] = num[i-1][j] + num[i][j-1];
            }
        }
        return num[m-1][n-1];
    }
};
