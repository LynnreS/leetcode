class Solution {
public:
    vector<string> fullJustify(vector<string> &words, int L) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<string> ret;
        if(words.size() == 0) return ret;
        if(L == 0) return words;

        string s;
        int i;
        int j = 0;
        for(i = 0; i < words.size(); i++){
            int l = words[i].length(); 
            if(l + s.length() <= L){           
               s.append(words[i]);
               s.push_back(' ');
               j++;
            }
            else{
                s.pop_back();
                s.push_back('0'+j);
                ret.push_back(s);
                s.clear();
                j = 0;
                i--;
            }         
        }
        if(s.length() > 0){
            s.pop_back();
            s.push_back('0'+j);
            ret.push_back(s);
            s.clear();
        }
        //nomalization
        for(i = 0; i < ret.size(); i++){
            int l = ret[i].length();
            if(ret[i][l-1] == '1' || i == ret.size()-1){
                ret[i].pop_back();
                while(ret[i].length() < L)
                    ret[i].push_back(' ');
            }
            else{
                int n = ret[i][l-1] - '0';
                ret[i].pop_back();
                int space = L - ret[i].length();
                int add = space / (n-1);
                int mod = space % (n-1);
                if(add == 0 && mod == 0) continue;
                int j = 0;
          //      while(ret[i][j] != ' ') j++;
           //     ret[i].insert(ret[i].begin()+j, add+mod, ' ');
               
                for( ; j < ret[i].length(); j++){
                    if(ret[i][j] == ' '){
                        if(mod > 0){
                            ret[i].insert(ret[i].begin()+j, add+1, ' ');
                            mod--;
                            j += add + 1;
                        }
                        else if(add > 0){
                            ret[i].insert(ret[i].begin()+j, add, ' ');
                            j += add;
                        }
                        else
                            break;
                        
                    }
                }

            }
            
        }
        return ret;
    }
};
