/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
TreeNode *build(vector<int> &preorder, vector<int> &inorder, int p_start, int i_start, int len) {
        if(len <= 0) return NULL;
        TreeNode *root = new TreeNode(preorder[p_start]);
        vector<int>::iterator it;
        it = find(inorder.begin()+i_start, inorder.begin()+i_start+len, preorder[p_start]);
        int l = it-inorder.begin()-i_start;
        root->left = build(preorder, inorder, p_start+1, i_start, l);
        root->right = build(preorder, inorder, p_start+l+1, i_start+l+1, len-l-1);
    }
    
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return build(preorder, inorder, 0, 0, preorder.size());
    }
};
