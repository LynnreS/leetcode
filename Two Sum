struct Node{
	int index;
	int val;
	Node(){}
	Node(int idx, int v):index(idx), val(v){}
};


class Solution {
public:
	bool cmp(const Node &a, const Node &b)
  {
	  return a.val < b.val;
  }

	vector<int> twoSum(vector<int> &numbers, int target) {
		// Start typing your C/C++ solution below
		// DO NOT write int main() function
		vector<Node> in_a;

		for (int i = 0; i < numbers.size(); i++)
		{
			in_a.push_back(Node(i+1, numbers[i]));
		}
		sort(in_a.begin(), in_a.end(), cmp);
		int i = 0;
		int j = numbers.size() - 1;
		while (i < j)
		{
			int tmp = in_a[i].val + in_a[j].val;
			if (tmp == target)
			{
				vector<int> ret;
				int maxIdx = max(in_a[i].index, in_a[j].index);
				int minIdx = min(in_a[i].index, in_a[j].index);
				ret.push_back(minIdx);
				ret.push_back(maxIdx);
				return ret;
			}
			else if (tmp < target)
			{
				i++;
			}
			else
			{
				j--;
			}
		}
	}

};
