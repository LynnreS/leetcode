class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> ret;
        int llen = L.size();
        int slen = S.size();
        
        if(!slen || !llen) return ret;
        int len = L[0].size();
        map<string, int> words;
        map<string, int> count;
        for(int i = 0; i < llen; i++) {
            words[L[i]]++;
        }
        int size = llen * len;
        for(int i = 0; i <= slen-size; i++) {
            count.clear();
            string sub = S.substr(i, size);
            int j = 0;
            for(; j < size; j+=len) {
                string tmp = sub.substr(j, len);
                if( words.find(tmp) == words.end() ) break;
                count[tmp]++;
                if(count[tmp] > words[tmp]) break;
            }
            if(j==size) ret.push_back(i);
        }
        return ret;
    }
};
