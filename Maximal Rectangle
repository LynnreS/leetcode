int maxSubSum(vector<int> &data) {
		
		vector<int> sum(data.size());
		sum[0] = data[0];
		int ret = INT_MIN;
		for(int i = 1; i < data.size(); i++) {
				if(sum[i-1] > 0) {
						sum[i] = sum[i-1] + data[i];
				}
				else
						sum[i] = data[i];
				if(ret < sum[i])
						ret = sum[i]; 
		}
		
		return ret;
}

int maxRecSum(vector<vector<int> > &data) {
    int n = data.size();
	  vector<vector<int> > sum(n, vector<int>(n, 0));
    for(int i = 0; i < n; i++) {
       for(int j = 0; j < n; j++) {
           if(i==0) sum[i][j] = data[i][j];
           else {
                sum[i][j] = sum[i-1][j] + data[i][j];
           }
       }
    }
    int ret(INT_MIN);
    for(int i = 0; i < n; i++) {
    		for(int j = i; j < n; j++) {
    				vector<int> arr(data[0].size());
    		    for(int k = 0; k < data[0].size(); k++) {
    		    		if(i==0) {
    		    				arr[k] = sum[j][k];
    		    		}
    		    		else {
    		    				arr[k] = sum[j][k] - sum[i-1][k];
    		    		}	
    		    }
    		    int t = maxSubSum(arr);
    		    if(ret < t) ret = t;
    		}
    }
		return ret;
}
